@page "/cart"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using YumBlazor.Utility
@using Services

@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager _NavigationManager
@inject IShoppingCartRepository _ShoppingCartRepository
@inject IOrderRepository _OrderRepository
@inject SharedStateService _SharedStateService
@inject PaymentService _PaymentService

@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading" />
    </div>
}
else
{
    @if (ShoppingCarts.Any())
    {
        <div class="row w-100">
            <div class="col-lg-6 col-12">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>

                    @foreach (var cartItem in ShoppingCarts)
                    {
                        <div class="d-flex p-2 m-2">
                            <div class="card flex-row w-100">
                                <img class="card-img-left" style="width: 120px;" src="@(cartItem.Product.ImageUrl ?? "/images/default.png")">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h4 class="">
                                            @cartItem.Product.Name
                                        </h4>
                                        <h4>
                                            @cartItem.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-US"))
                                        </h4>
                                    </div>
                                    <div class="flex-fill">
                                        <h4 class="text-danger">
                                            @((cartItem.Product.Price * cartItem.Count).ToString("C", CultureInfo.GetCultureInfo("en-US")))
                                        </h4>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex justify-content-between g-0">
                                            <span @onclick="() => UpdateCartItem(cartItem.ProductId, -1)">
                                                <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                                            </span>
                                            <span class="ml-1 me-1">
                                                <b class="lead">@cartItem.Count</b>
                                            </span>
                                            <span @onclick="() => UpdateCartItem(cartItem.ProductId, 1)">
                                                <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                                            </span>
                                        </div>
                                        <button class="btn btn-danger" @onclick="() => UpdateCartItem(cartItem.ProductId, -cartItem.Count)">Remove</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-6 col-12 p-4">
                <div class="card">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                        <DataAnnotationsValidator />
                        <div class="card-body">
                            <div class="form-group">
                                <label>Name</label>
                                <InputText @bind-Value="OrderHeader.Name" type="text" class="form-control" />
                                <ValidationMessage For="@(() => OrderHeader.Name)" />
                            </div>
                            <div class="form-group">
                                <label>Email</label>
                                <InputText @bind-Value="OrderHeader.Email" type="email" class="form-control" />
                                <ValidationMessage For="@(() => OrderHeader.Email)" />
                            </div>
                            <div class="form-group">
                                <label>Phone</label>
                                <InputText @bind-Value="OrderHeader.PhoneNumber" type="phone" class="form-control" />
                                <ValidationMessage For="@(() => OrderHeader.PhoneNumber)" />
                            </div>
                            <div class="card mt-4 bg-light">
                                <div class="card-body">
                                    <h4>
                                        Grand Total: @OrderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-US"))
                                    </h4>
                                    <h4>
                                        No. of Items: @TotalItems
                                    </h4>
                                </div>

                            </div>
                        </div>
                        <button type="submit" class="btn btn-success m-4">
                            Looks Good? Place Order!
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="alert alert-warning">
                Your cart is empty. Please add some items to your cart.
            </div>
        </div>
    }
}



@code {
    private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>();
    private bool IsProcessing { get; set; } = true;

    [SupplyParameterFromForm(FormName = "CartForm")]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();
    private int TotalItems { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        OrderHeader.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        OrderHeader.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        OrderHeader.Status = SD.StatusPending;
    }

    protected override async Task OnAfterRenderAsync(bool firstReneder)
    {
        if (firstReneder)
        {
            await LoadCart();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCart()
    {
        ShoppingCarts = await _ShoppingCartRepository.GetAllAsync(OrderHeader.UserId);

        OrderHeader.OrderTotal = Math.Round(ShoppingCarts.Sum(cart => cart.Product.Price * cart.Count), 2);
        TotalItems = ShoppingCarts.Sum(cart => cart.Count);
    }

    private async Task UpdateCartItem(int productId, int updateBy)
    {
        var result = await _ShoppingCartRepository.UpdateCartAsync(OrderHeader.UserId, productId, updateBy);
        _SharedStateService.TotalCartCount = await _ShoppingCartRepository.GetTotalCartCountAsync(OrderHeader.UserId);

        await LoadCart();
    }

    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;

        await Task.Yield();

        OrderHeader.OrderDetails = SD.ConvertShoppingCartListToOrderDetail(ShoppingCarts.ToList());

        var session = _PaymentService.CreateStripeCheckoutSession(OrderHeader);

        OrderHeader.SessionId = session.Id;

        await _OrderRepository.CreateAsync(OrderHeader);

        _NavigationManager.NavigateTo(session.Url);
    }
}
