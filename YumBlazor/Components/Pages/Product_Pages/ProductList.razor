@page "/product"
@using System.Globalization
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime

<BsModal ButtonBootstrapStyle="btn-danger" ButtonText="Delete" Title="Are you sure you want to delete the product below?" DeletedObjectName="@DeleteProduct?.Name" OnModalConfirmation="ConfirmDelete"></BsModal>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="product/create" class="btn btn-lg btn-secondary" style="width:250px;">
                        <i class="bi bi-plus-square"></i> Add new product</a>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Special tag</th>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Products)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</td>
                                <td><span class="badge text-bg-info">@product.SpecialTag</span></td>
                                <td>@product.Category?.Name</td>
                                <td class="text-end">
                                    <a href="product/update/@product.Id" class="btn btn-sm btn-primary">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </a>
                                    <button class="btn btn-sm btn-danger" @onclick="() => HandleDelete(product)">
                                        <i class="bi bi-trash3"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    private IEnumerable<Product> Products { get; set; } = new List<Product>();
    private Product DeleteProduct { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
    }

    private void HandleDelete(Product product)
    {
        DeleteProduct = product;
        _jsRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete(bool isConfirmed)
    {
        IsProcessing = true;
        await _jsRuntime.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteProduct.Id > 0)
        {
            var result = await _productRepository.DeleteAsync(DeleteProduct.Id);

            if (result)
            {
                _jsRuntime?.ToastrSuccessAsync("Product deleted successfully.");
            } 
            else
            {
                _jsRuntime?.ToastrErrorAsync("Delete operation failed.");
            }

            await LoadProducts();
        }
        DeleteProduct.Id = 0;
        IsProcessing = false;
    }
}
