@page "/order/details/{Id:int}"
@using System.Globalization
@using YumBlazor.Utility

@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JSRuntime
@inject IOrderRepository _OrderRepository


@if (IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading" />
    </div>
}
else
{  
    <div class="container my-5 mx-auto p-5 w-100" style="max-width: 950px;">
        <div class="card" style="max-width: 750px;">
            <div class="pt-3 text-success text-center">
                <span class="h4"> ORDER DETAILS</span>
            </div>

            <hr />
            <div class="px-3">
                <p>Order Id: @($"{DateTime.Now.Year}.{OrderHeader.Id}")</p>
                <p>Name: @OrderHeader.Name</p>
                <p>Email: @OrderHeader.Email</p>
                <p>Phone: @OrderHeader.PhoneNumber</p>
                <p>Order Status: @OrderHeader.Status</p>
            </div>
            <hr />
            <div class="card-body">
                <h4 class="text-success">Menu Items</h4>

                @foreach (var orderDetail in OrderHeader.OrderDetails)
                {
                    <div class="d-flex">
                        <div class="d-flex w-100 justify-content-between">
                            <p>
                                &nbsp; @orderDetail.Product.Name
                            </p>
                            <p>
                                @orderDetail.Price.ToString("C", CultureInfo.GetCultureInfo("en-US")) x @orderDetail.Count = 
                            </p>
                        </div>
                        <div class="ps-4">
                            @((orderDetail.Price * orderDetail.Count).ToString("C", CultureInfo.GetCultureInfo("en-US")))
                        </div>
                    </div>
                }

                <hr />
                <h4 class="text-success text-end">
                    @OrderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-US"))
                </h4>
                <hr />

                <div class="row">
                    <div class="col-5">
                        <a href="order/list" class="btn btn-secondary  m-2 p-2" style="width:150px;">Back to Orders</a>
                    </div>
                    <div class="col-7 text-end">
                        @if (OrderHeader.Status != SD.StatusCancelled && OrderHeader.Status != SD.StatusCompleted && _AuthenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult().User?.IsInRole(SD.Role_Admin) == true)
                        {
                            <button class="btn btn-danger m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(SD.StatusCancelled)">Cancel Order</button>

                            @if (OrderHeader.Status == SD.StatusApproved)
                            {
                                <button class="btn btn-primary m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(SD.StatusReadyForPickUp)">Ready for Pickup</button>
                            }

                            @if (OrderHeader.Status == SD.StatusReadyForPickUp)
                            {
                                <button class="btn btn-success m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(SD.StatusCompleted)">Completed</button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    public bool IsProcessing { get; set; } = true;

    [Parameter]
    public int Id { get; set; }

    private OrderHeader OrderHeader { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrder();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrder()
    {
        OrderHeader = await _OrderRepository.GetAsync(Id);
    }

    private async Task UpdateStatus(string newStatus)
    {
        await _OrderRepository.UpdateStatusAsync(Id, newStatus, "");
        _JSRuntime?.ToastrSuccessAsync($"Status updated successfully to {newStatus}!");
    }
}
